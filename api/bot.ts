// üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞
// bun install grammy @supabase/supabase-js dotenv

import { createClient } from "@supabase/supabase-js"
import "dotenv/config"
import {
	Bot,
	InlineKeyboard,
	Keyboard,
	session,
	SessionFlavor,
	webhookCallback,
} from "grammy"

// üåê Supabase client
const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!)

interface SessionData {
	expectingBudget?: boolean
	addingExpense?: boolean
	expectingSaveGoal?: boolean
	confirmResetStep?: number
	editingExpenseId?: number
	editingExpenseStep?: number
}

type MyContext = Parameters<typeof bot.on>[0] & SessionFlavor<SessionData>

const bot = new Bot<MyContext>(process.env.BOT_TOKEN!)

bot.use(session<SessionData>({ initial: () => ({}) }))

function getCurrentMonth() {
	const now = new Date()
	return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`
}

function daysLeftInMonth() {
	const now = new Date()
	const last = new Date(now.getFullYear(), now.getMonth() + 1, 0)
	return last.getDate() - now.getDate() + 1
}

async function getUserId(ctx: MyContext) {
	const tgId = ctx.from.id
	const { data: user } = await supabase
		.from("users")
		.select("id")
		.eq("telegram_id", tgId)
		.single()
	if (user) return user.id

	const { data: newUser } = await supabase
		.from("users")
		.insert({ telegram_id: tgId })
		.select()
		.single()

	return newUser.id
}

function parseExpenseLine(line: string) {
	const trimmed = line.trim()
	const fullMatch = trimmed.match(/(.+?)[-,]\s*(.*?)\s+(\d+)$/)
	if (fullMatch) {
		const [_, category, comment, amount] = fullMatch
		return {
			category: category.trim(),
			comment: comment.trim() || null,
			amount: parseInt(amount),
		}
	}
	const simpleMatch = trimmed.match(/(.+)\s+(\d+)$/)
	if (simpleMatch) {
		const [_, category, amount] = simpleMatch
		return { category: category.trim(), comment: null, amount: parseInt(amount) }
	}
	return null
}

const emojiMap: Record<string, string> = {
	–µ–¥–∞: "üçî",
	—Ä–µ—Å—Ç–æ—Ä–∞–Ω: "üçΩÔ∏è",
	–∫–æ–º–ø—ã: "üíª",
	–≥—Ä–∏–±—ã: "üçÑ",
	—Ç–∞–∫—Å–∏: "üöï",
	—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: "üöå",
	–æ–¥–µ–∂–¥–∞: "üëï",
	–∑–¥–æ—Ä–æ–≤—å–µ: "üíä",
	–∫–æ—Ñ–µ: "‚òï",
	—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: "üéÆ",
	–∫–Ω–∏–≥–∏: "üìö",
	–∞—Ä–µ–Ω–¥–∞: "üè†",
	—É—Å–ª—É–≥–∏: "üõ†Ô∏è",
	–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: "‚úàÔ∏è",
	—Å–≤—è–∑—å: "üì±",
	–ø–æ–¥–∞—Ä–∫–∏: "üéÅ",
	–¥–µ—Ç–∏: "üßí",
	–∂–∏–≤–æ—Ç–Ω—ã–µ: "üê∂",
}

function getEmoji(category: string) {
	const lower = category.toLowerCase()
	return emojiMap[lower] || "üí∏"
}

const defaultMenu = new Keyboard()
	.text("‚úÖ –ù–æ–≤—ã–π –º–µ—Å—è—Ü")
	.text("üìÖ –ú–µ—Å—è—Ü—ã")
	.row()
	.text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
	.text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥") // –ó–∞–º–µ–Ω–µ–Ω–æ –∑–¥–µ—Å—å
	.row()
	.text("üìä –ü–æ—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã")
	.text("üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
	.row()
	.text("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏")
	.text("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—Ü")
	.resized()

bot.command("start", async ctx => {
	await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", { reply_markup: defaultMenu })
})

bot.hears("‚úÖ –ù–æ–≤—ã–π –º–µ—Å—è—Ü", async ctx => {
	ctx.session.expectingBudget = true
	await ctx.reply("üí∞ –í–≤–µ–¥–∏ –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü (–≤ —Ç–µ–Ω–≥–µ):")
})

bot.hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", async ctx => {
	ctx.session.addingExpense = true
	await ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏ —Ä–∞—Å—Ö–æ–¥(—ã):\n–ü—Ä–∏–º–µ—Ä:\n–∫–æ–º–ø—ã - –Ω–æ—á—å 4000–Ω–µ–¥–∞, —Ä–µ—Å—Ç–æ—Ä–∞–Ω 12000")
})

bot.hears("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", async ctx => {
	const userId = await getUserId(ctx)
	const month = getCurrentMonth()

	const { data: expenses, error } = await supabase
		.from("expenses")
		.select("id, category, amount, comment")
		.eq("user_id", userId)
		.gte("created_at", `${month}-01`)
		.order("created_at", { ascending: false })
		.limit(5)

	if (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:", error)
		return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.")
	}

	if (!expenses || expenses.length === 0) {
		return ctx.reply("üì≠ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
	}

	for (const e of expenses) {
		const label = `${getEmoji(e.category)} ${e.category} ‚Äî ${e.amount}‚Ç∏${
			e.comment ? ` (${e.comment})` : ""
		}`

		const keyboard = new InlineKeyboard().text(
			`‚ùå –£–¥–∞–ª–∏—Ç—å`,
			`delete_${e.id}`, // UUID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
		)

		await ctx.reply(`üßæ ${label}`, { reply_markup: keyboard })
	}
})

// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
bot.callbackQuery(/^delete_(.+)$/, async ctx => {
	try {
		const id = ctx.match![1] // UUID —Å—Ç—Ä–æ–∫–æ–π

		if (!id || id.length < 10) throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π UUID")

		const { error } = await supabase.from("expenses").delete().eq("id", id)

		if (error) {
			console.error("‚ùå Supabase –æ—à–∏–±–∫–∞:", error)
			await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert: true })
			return
		}

		await ctx.editMessageText("üóëÔ∏è –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª—ë–Ω.")
		await ctx.answerCallbackQuery({ text: "‚úÖ –£–¥–∞–ª–µ–Ω–æ", show_alert: false })
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –≤ callbackQuery:", err)
		await ctx.answerCallbackQuery({ text: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å", show_alert: true })
	}
})

bot.hears("üìä –ü–æ—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã", async ctx => {
	const userId = await getUserId(ctx)
	const month = getCurrentMonth()
	const { data: budgetRow } = await supabase
		.from("months")
		.select("budget")
		.eq("user_id", userId)
		.eq("month", month)
		.single()
	const { data: expenses } = await supabase
		.from("expenses")
		.select("amount, category")
		.eq("user_id", userId)
		.gte("created_at", `${month}-01`)
	const spent = expenses?.reduce((sum, e) => sum + e.amount, 0) ?? 0
	const budget = budgetRow?.budget ?? 0
	const grouped = expenses?.reduce((acc, e) => {
		acc[e.category] = (acc[e.category] || 0) + e.amount
		return acc
	}, {} as Record<string, number>)
	const list = grouped
		? Object.entries(grouped)
				.map(([cat, amt]) => `‚Ä¢ ${getEmoji(cat)} ${cat} ‚Äî ${amt} ‚Ç∏`)
				.join("\n")
		: "–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤"
	ctx.reply(
		`üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${spent} ‚Ç∏\nüìä –û—Å—Ç–∞—Ç–æ–∫: ${budget - spent} ‚Ç∏\n\nüßæ –†–∞—Å—Ö–æ–¥—ã:\n${list}`,
	)
})

bot.hears("üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", async ctx => {
	const userId = await getUserId(ctx)
	const { data: expenses } = await supabase
		.from("expenses")
		.select("category, amount")
		.eq("user_id", userId)
	if (!expenses || expenses.length === 0) return ctx.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
	const grouped = expenses.reduce((acc, e) => {
		acc[e.category] = (acc[e.category] || 0) + e.amount
		return acc
	}, {} as Record<string, number>)
	const sorted = Object.entries(grouped).sort((a, b) => b[1] - a[1])
	const top = sorted
		.map(([cat, amt]) => `‚Ä¢ ${getEmoji(cat)} ${cat} ‚Äî ${amt} ‚Ç∏`)
		.join("\n")
	ctx.reply(`üìä –¢–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤:\n${top}`)
})

bot.hears("üìÖ –ú–µ—Å—è—Ü—ã", async ctx => {
	const userId = await getUserId(ctx)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±—é–¥–∂–µ—Ç–∞–º–∏
	const { data: months, error: monthsError } = await supabase
		.from("months")
		.select("month, budget")
		.eq("user_id", userId)
		.order("month", { ascending: false })

	if (monthsError) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Å—è—Ü–µ–≤:", monthsError)
		return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
	}

	if (!months || months.length === 0) {
		return ctx.reply("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤.")
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const { data: expenses, error: expensesError } = await supabase
		.from("expenses")
		.select("amount, created_at")
		.eq("user_id", userId)

	if (expensesError) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:", expensesError)
		return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.")
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
	const result = months.map(({ month, budget }) => {
		const monthStart = `${month}-01`
		const monthEnd = `${month}-31`

		// –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
		const spent = expenses
			.filter(e => e.created_at >= monthStart && e.created_at <= monthEnd)
			.reduce((sum, e) => sum + e.amount, 0)

		const left = budget - spent

		return `üìÖ ${month}\nüí∞ –ë—é–¥–∂–µ—Ç: ${budget} ‚Ç∏\nüí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${spent} ‚Ç∏\nüíµ –û—Å—Ç–∞—Ç–æ–∫: ${left} ‚Ç∏`
	})

	await ctx.reply(result.join("\n\n"))
})

bot.hears("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏", async ctx => {
	ctx.session.expectingSaveGoal = true
	ctx.reply("üíæ –°–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ? (–≤ —Ç–µ–Ω–≥–µ)")
})

bot.hears("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—Ü", async ctx => {
	ctx.session.confirmResetStep = 1
	ctx.reply("‚ö†Ô∏è –¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü? –ù–∞–ø–∏—à–∏ `–î–∞`, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω.")
})

bot.on("message:text", async ctx => {
	const text = ctx.message.text
	const userId = await getUserId(ctx)
	const month = getCurrentMonth()

	if (ctx.session.confirmResetStep === 1 && text.toLowerCase() === "–¥–∞") {
		ctx.session.confirmResetStep = 2
		return ctx.reply(
			"üõë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –µ—â—ë —Ä–∞–∑: —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü? –ù–∞–ø–∏—à–∏ `–î–∞` –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
		)
	}
	if (ctx.session.confirmResetStep === 2 && text.toLowerCase() === "–¥–∞") {
		await supabase
			.from("expenses")
			.delete()
			.eq("user_id", userId)
			.gte("created_at", `${month}-01`)
		await supabase.from("months").delete().eq("user_id", userId).eq("month", month)
		ctx.session.confirmResetStep = undefined
		await ctx.reply("‚úÖ –ú–µ—Å—è—Ü —Å–±—Ä–æ—à–µ–Ω.\n\nüß≠ –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: –Ω–∞–∂–º–∏ `–ù–æ–≤—ã–π –º–µ—Å—è—Ü`", {
			reply_markup: new Keyboard().text("–ù–æ–≤—ã–π –º–µ—Å—è—Ü").resized(),
		})
		return
	}

	if (ctx.session.expectingBudget) {
		const budget = parseInt(text)
		if (isNaN(budget)) return ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
		await supabase
			.from("months")
			.upsert({ user_id: userId, month, budget, created_at: new Date() })
		ctx.session.expectingBudget = false
		return ctx.reply(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±—é–¥–∂–µ—Ç –Ω–∞ ${month}: ${budget} ‚Ç∏`, {
			reply_markup: defaultMenu,
		})
	}

	if (ctx.session.addingExpense) {
		const lines = text.split("\n")
		const expenses = lines.map(parseExpenseLine).filter(Boolean)
		if (expenses.length === 0) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã")
		await Promise.all(
			expenses.map(e =>
				supabase.from("expenses").insert({
					user_id: userId,
					amount: e.amount,
					category: e.category,
					comment: e.comment,
					created_at: new Date(),
				}),
			),
		)
		ctx.session.addingExpense = false
		return ctx.reply(
			`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n` +
				expenses
					.map(
						e =>
							`‚Ä¢ ${getEmoji(e.category)} ${e.category} ‚Äî ${e.amount} ‚Ç∏${
								e.comment ? ` (${e.comment})` : ""
							}`,
					)
					.join("\n"),
			{ reply_markup: defaultMenu },
		)
	}

	if (ctx.session.editingExpenseId) {
		const parsed = parseExpenseLine(text)
		if (!parsed) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
		await supabase
			.from("expenses")
			.update({
				amount: parsed.amount,
				category: parsed.category,
				comment: parsed.comment,
			})
			.eq("id", ctx.session.editingExpenseId)
		ctx.session.editingExpenseId = undefined
		return ctx.reply("‚úÖ –†–∞—Å—Ö–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω", { reply_markup: defaultMenu })
	}

	if (ctx.session.expectingSaveGoal) {
		const goal = parseInt(text)
		if (isNaN(goal)) return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
		const { data: budgetRow } = await supabase
			.from("months")
			.select("budget")
			.eq("user_id", userId)
			.eq("month", month)
			.single()
		const { data: expenses } = await supabase
			.from("expenses")
			.select("amount")
			.eq("user_id", userId)
			.gte("created_at", `${month}-01`)
		const spent = expenses?.reduce((sum, e) => sum + e.amount, 0) ?? 0
		const budget = budgetRow?.budget ?? 0
		const left = budget - spent
		const days = daysLeftInMonth()
		const perDay = Math.floor((left - goal) / days)
		ctx.session.expectingSaveGoal = false
		if (left >= goal) {
			return ctx.reply(
				`üìä –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ${goal} ‚Ç∏:\n\n‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${days}\n‚Ä¢ –õ–∏–º–∏—Ç –Ω–∞ –¥–µ–Ω—å: ${perDay} ‚Ç∏\n\nüî• –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!`,
			)
		} else {
			const needToCut = goal - left
			return ctx.reply(
				`‚ö†Ô∏è –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ${goal} ‚Ç∏, –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ ${needToCut} ‚Ç∏.\n\n–°–µ–π—á–∞—Å —É–∂–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏.`,
			)
		}
	}
})

bot.catch(err => {
	console.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", err)
})

// bot.start()
export default webhookCallback(bot, "https")
