import { createClient } from "@supabase/supabase-js"
import "dotenv/config"
import { Bot, InlineKeyboard, Keyboard, session, SessionFlavor } from "grammy"

// üåê Supabase client
const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!)

interface SessionData {
	expectingBudget?: boolean
	addingExpense?: boolean
	expectingSaveGoal?: boolean
	confirmResetStep?: number
	expectingFoodSubcategory?: boolean
	pendingExpense?: { category: string; comment: string | null; amount: number }
}

type MyContext = Parameters<typeof bot.on>[0] & SessionFlavor<SessionData>

const bot = new Bot<MyContext>(process.env.BOT_TOKEN!)

bot.use(session<SessionData>({ initial: () => ({}) }))

function getCurrentMonth() {
	const now = new Date()
	return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`
}

function daysLeftInMonth() {
	const now = new Date()
	const last = new Date(now.getFullYear(), now.getMonth() + 1, 0)
	return last.getDate() - now.getDate() + 1
}

async function getUserId(ctx: MyContext) {
	try {
		const tgId = ctx.from.id
		const { data: user, error: selectError } = await supabase
			.from("users")
			.select("id")
			.eq("telegram_id", tgId)
			.single()
		if (selectError) throw selectError
		if (user) return user.id

		const { data: newUser, error: insertError } = await supabase
			.from("users")
			.insert({ telegram_id: tgId })
			.select()
			.single()
		if (insertError) throw insertError
		return newUser.id
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –≤ getUserId:", error)
		await ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		throw error
	}
}

function parseExpenseLine(line: string) {
	const trimmed = line.trim()
	const fullMatch = trimmed.match(/(.+?)[-,]\s*(.*?)\s+(\d+)$/)
	if (fullMatch) {
		const [_, category, comment, amount] = fullMatch
		return {
			category: category.trim(),
			comment: comment.trim() || null,
			amount: parseInt(amount),
		}
	}
	const simpleMatch = trimmed.match(/(.+)\s+(\d+)$/)
	if (simpleMatch) {
		const [_, category, amount] = simpleMatch
		return { category: category.trim(), comment: null, amount: parseInt(amount) }
	}
	return null
}

const emojiMap: Record<string, string> = {
	–µ–¥–∞: "üçî",
	—Ä–µ—Å—Ç–æ—Ä–∞–Ω: "üçΩÔ∏è",
	–∫–æ–º–ø—ã: "üíª",
	–≥—Ä–∏–±—ã: "üçÑ",
	—Ç–∞–∫—Å–∏: "üöï",
	—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: "üöå",
	–æ–¥–µ–∂–¥–∞: "üëï",
	–∑–¥–æ—Ä–æ–≤—å–µ: "üíä",
	–∫–æ—Ñ–µ: "‚òï",
	—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: "üéÆ",
	–∫–Ω–∏–≥–∏: "üìö",
	–∞—Ä–µ–Ω–¥–∞: "üè†",
	—É—Å–ª—É–≥–∏: "üõ†Ô∏è",
	–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è: "‚úàÔ∏è",
	—Å–≤—è–∑—å: "üì±",
	–ø–æ–¥–∞—Ä–∫–∏: "üéÅ",
	–¥–µ—Ç–∏: "üßí",
	–∂–∏–≤–æ—Ç–Ω—ã–µ: "üê∂",
}

function getEmoji(category: string) {
	const lower = category.toLowerCase()
	return emojiMap[lower] || "üí∏"
}

const defaultMenu = new Keyboard()
	.text("‚úÖ –ù–æ–≤—ã–π –º–µ—Å—è—Ü")
	.text("üìÖ –ú–µ—Å—è—Ü—ã")
	.row()
	.text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
	.text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
	.row()
	.text("üìä –ü–æ—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã")
	.text("üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
	.row()
	.text("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏")
	.text("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—Ü")
	.row()
	.text("–û—Ç–º–µ–Ω–∞")
	.resized()

const foodSubcategoryKeyboard = new InlineKeyboard()
	.text("–Ø–Ω–¥–µ–∫—Å", "food_yandex")
	.text("Small", "food_small")
	.text("–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π", "food_grocery")
	.row()
	.text("–û—Ç–º–µ–Ω–∞", "food_cancel")

bot.command("start", async ctx => {
	await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", { reply_markup: defaultMenu })
})

bot.hears("–û—Ç–º–µ–Ω–∞", async ctx => {
	ctx.session.expectingBudget = false
	ctx.session.addingExpense = false
	ctx.session.expectingSaveGoal = false
	ctx.session.confirmResetStep = undefined
	ctx.session.expectingFoodSubcategory = false
	ctx.session.pendingExpense = undefined
	await ctx.reply("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", { reply_markup: defaultMenu })
})

bot.hears("‚úÖ –ù–æ–≤—ã–π –º–µ—Å—è—Ü", async ctx => {
	ctx.session.expectingBudget = true
	await ctx.reply(
		"üí∞ –í–≤–µ–¥–∏ –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü (–≤ —Ç–µ–Ω–≥–µ, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ 1,000,000,000):",
		{
			reply_markup: new Keyboard().text("–û—Ç–º–µ–Ω–∞").resized(),
		},
	)
})

bot.hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", async ctx => {
	ctx.session.addingExpense = true
	await ctx.reply(
		"‚úèÔ∏è –í–≤–µ–¥–∏ —Ä–∞—Å—Ö–æ–¥(—ã):\n–ü—Ä–∏–º–µ—Ä:\n—Ç–∞—Ç–∞—Ä–∫–∞ 50000\n–∏–ª–∏\n—Ç–∞—Ç–∞—Ä–∫–∞ - —É–∂–∏–Ω 50000\n\n‚Äº –ü–æ –æ—á–µ—Ä–µ–¥–∏ —Ä–∞—Å—Ö–æ–¥—ã –¥–æ–±–∞–≤–ª—è—Ç—å. (–ü–æ –æ–¥–Ω–æ–º—É)",
		{ reply_markup: new Keyboard().text("–û—Ç–º–µ–Ω–∞").resized() },
	)
})

bot.hears("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", async ctx => {
	const userId = await getUserId(ctx)
	const month = getCurrentMonth()

	const { data: expenses, error } = await supabase
		.from("expenses")
		.select("id, category, amount, comment, subcategory")
		.eq("user_id", userId)
		.gte("created_at", `${month}-01`)
		.order("created_at", { ascending: false })
		.limit(5)

	if (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:", error)
		return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
			reply_markup: defaultMenu,
		})
	}

	if (!expenses || expenses.length === 0) {
		return ctx.reply("üì≠ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", { reply_markup: defaultMenu })
	}

	for (const e of expenses) {
		const subcategory = e.subcategory ? ` (${e.subcategory})` : ""
		const label = `${getEmoji(e.category)} ${e.category}${subcategory} ‚Äî ${e.amount}‚Ç∏${
			e.comment ? ` (${e.comment})` : ""
		}`

		const keyboard = new InlineKeyboard().text("‚ùå –£–¥–∞–ª–∏—Ç—å", `delete_${e.id}`)

		await ctx.reply(`üßæ ${label}`, { reply_markup: keyboard })
	}
})

bot.callbackQuery(
	/^delete_([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$/,
	async ctx => {
		try {
			const id = ctx.match![1]
			const userId = await getUserId(ctx)

			const { data: expense, error: selectError } = await supabase
				.from("expenses")
				.select("user_id")
				.eq("id", id)
				.single()
			if (selectError) throw selectError
			if (expense?.user_id !== userId) {
				await ctx.answerCallbackQuery({ text: "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à —Ä–∞—Å—Ö–æ–¥", show_alert: true })
				return
			}

			const { error } = await supabase.from("expenses").delete().eq("id", id)
			if (error) throw error

			await ctx.editMessageText("üóëÔ∏è –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª—ë–Ω.")
			await ctx.answerCallbackQuery({ text: "‚úÖ –£–¥–∞–ª–µ–Ω–æ", show_alert: false })
		} catch (err) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –≤ callbackQuery:", err)
			await ctx.answerCallbackQuery({ text: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å", show_alert: true })
		}
	},
)

bot.callbackQuery(/^food_(.+)$/, async ctx => {
	try {
		const action = ctx.match![1]
		if (action === "cancel") {
			ctx.session.expectingFoodSubcategory = false
			ctx.session.pendingExpense = undefined
			await ctx.reply("üö´ –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω—ë–Ω.", { reply_markup: defaultMenu })
			await ctx.answerCallbackQuery()
			return
		}

		if (!ctx.session.pendingExpense) {
			await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–µ.", { reply_markup: defaultMenu })
			await ctx.answerCallbackQuery()
			return
		}

		const userId = await getUserId(ctx)
		const { category, comment, amount } = ctx.session.pendingExpense
		const subcategory =
			action === "yandex" ? "–Ø–Ω–¥–µ–∫—Å" : action === "small" ? "Small" : "–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π"

		const { error } = await supabase.from("expenses").insert({
			user_id: userId,
			amount,
			category,
			comment,
			subcategory,
			created_at: new Date(),
		})
		if (error) throw error

		ctx.session.expectingFoodSubcategory = false
		ctx.session.pendingExpense = undefined
		const subcategoryText = subcategory ? ` (${subcategory})` : ""
		await ctx.reply(
			`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n‚Ä¢ ${getEmoji(
				category,
			)} ${category}${subcategoryText} ‚Äî ${amount} ‚Ç∏${comment ? ` (${comment})` : ""}`,
			{ reply_markup: defaultMenu },
		)
		await ctx.answerCallbackQuery({ text: "‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞" })
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", err)
		await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏", show_alert: true })
	}
})

bot.hears("üìä –ü–æ—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã", async ctx => {
	const userId = await getUserId(ctx)
	const month = getCurrentMonth()

	const { data: budgetRow, error: budgetError } = await supabase
		.from("months")
		.select("budget")
		.eq("user_id", userId)
		.eq("month", month)
		.single()
	if (budgetError && budgetError.code !== "PGRST116") {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—é–¥–∂–µ—Ç–∞:", budgetError)
		return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±—é–¥–∂–µ—Ç.", { reply_markup: defaultMenu })
	}

	const { data: expenses, error: expensesError } = await supabase
		.from("expenses")
		.select("amount, category, subcategory, created_at")
		.eq("user_id", userId)
		.gte("created_at", `${month}-01`)
	if (expensesError) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:", expensesError)
		return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.", { reply_markup: defaultMenu })
	}

	const spent = expenses?.reduce((sum, e) => sum + e.amount, 0) ?? 0
	const budget = budgetRow?.budget ?? 0
	const list = expenses?.length
		? expenses
				.map(e => {
					const category = e.subcategory ? `${e.category} (${e.subcategory})` : e.category
					const time = new Date(e.created_at).toLocaleString("ru-RU", {
						day: "2-digit",
						month: "2-digit",
						year: "numeric",
						hour: "2-digit",
						minute: "2-digit",
					})
					return `‚Ä¢ ${getEmoji(e.category)} ${category} ‚Äî ${e.amount}‚Ç∏\n(${time})\n`
				})
				.join("\n")
		: "–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤"
	ctx.reply(
		`üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${spent} ‚Ç∏\nüìä –û—Å—Ç–∞—Ç–æ–∫: ${budget - spent} ‚Ç∏\n\nüßæ –†–∞—Å—Ö–æ–¥—ã:\n${list}`,
		{ reply_markup: defaultMenu },
	)
})

bot.hears("üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", async ctx => {
	const userId = await getUserId(ctx)
	const { data: expenses, error } = await supabase
		.from("expenses")
		.select("category, amount, subcategory")
		.eq("user_id", userId)
	if (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:", error)
		return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", { reply_markup: defaultMenu })
	}
	if (!expenses || expenses.length === 0) {
		return ctx.reply("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", { reply_markup: defaultMenu })
	}
	const grouped = expenses.reduce((acc, e) => {
		const key = e.subcategory ? `${e.category} (${e.subcategory})` : e.category
		acc[key] = (acc[key] || 0) + e.amount
		return acc
	}, {} as Record<string, number>)
	const sorted = Object.entries(grouped).sort((a, b) => b[1] - a[1])
	const top = sorted
		.map(([cat, amt]) => `‚Ä¢ ${getEmoji(cat.split(" ")[0])} ${cat} ‚Äî ${amt} ‚Ç∏`)
		.join("\n")
	ctx.reply(`üìä –¢–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤:\n${top}`, { reply_markup: defaultMenu })
})

bot.hears("üìÖ –ú–µ—Å—è—Ü—ã", async ctx => {
	const userId = await getUserId(ctx)
	const { data: months, error: monthsError } = await supabase
		.from("months")
		.select("month, budget")
		.eq("user_id", userId)
		.order("month", { ascending: false })
	if (monthsError) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Å—è—Ü–µ–≤:", monthsError)
		return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", { reply_markup: defaultMenu })
	}
	if (!months || months.length === 0) {
		return ctx.reply("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤.", { reply_markup: defaultMenu })
	}

	const { data: expenses, error: expensesError } = await supabase
		.from("expenses")
		.select("amount, created_at")
		.eq("user_id", userId)
	if (expensesError) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:", expensesError)
		return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.", { reply_markup: defaultMenu })
	}

	const result = months.map(({ month, budget }) => {
		const monthStart = `${month}-01`
		const nextMonth = new Date(`${month}-01`)
		nextMonth.setMonth(nextMonth.getMonth() + 1)
		const monthEnd = `${nextMonth.getFullYear()}-${String(
			nextMonth.getMonth() + 1,
		).padStart(2, "0")}-01`
		const spent = expenses
			.filter(e => e.created_at >= monthStart && e.created_at < monthEnd)
			.reduce((sum, e) => sum + e.amount, 0)
		const left = budget - spent
		return `üìÖ ${month}\nüí∞ –ë—é–¥–∂–µ—Ç: ${budget} ‚Ç∏\nüí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${spent} ‚Ç∏\nüíµ –û—Å—Ç–∞—Ç–æ–∫: ${left} ‚Ç∏`
	})

	await ctx.reply(result.join("\n\n"), { reply_markup: defaultMenu })
})

bot.hears("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏", async ctx => {
	ctx.session.expectingSaveGoal = true
	ctx.reply(
		"üíæ –°–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ? (–≤ —Ç–µ–Ω–≥–µ, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ 1,000,000,000)",
		{
			reply_markup: new Keyboard().text("–û—Ç–º–µ–Ω–∞").resized(),
		},
	)
})

bot.hears("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—Ü", async ctx => {
	ctx.session.confirmResetStep = 1
	ctx.reply("‚ö†Ô∏è –¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü? –ù–∞–ø–∏—à–∏ `–î–∞`, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω.", {
		reply_markup: new Keyboard().text("–û—Ç–º–µ–Ω–∞").resized(),
	})
})

bot.on("message:text", async ctx => {
	const text = ctx.message.text
	const userId = await getUserId(ctx)
	const month = getCurrentMonth()

	if (ctx.session.confirmResetStep === 1 && text.toLowerCase() === "–¥–∞") {
		ctx.session.confirmResetStep = 2
		return ctx.reply(
			"üõë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –µ—â—ë —Ä–∞–∑: —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü? –ù–∞–ø–∏—à–∏ `–î–∞` –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
			{ reply_markup: new Keyboard().text("–û—Ç–º–µ–Ω–∞").resized() },
		)
	}
	if (ctx.session.confirmResetStep === 2 && text.toLowerCase() === "–¥–∞") {
		try {
			const [expensesRes, monthsRes] = await Promise.all([
				supabase
					.from("expenses")
					.delete()
					.eq("user_id", userId)
					.gte("created_at", `${month}-01`),
				supabase.from("months").delete().eq("user_id", userId).eq("month", month),
			])
			if (expensesRes.error || monthsRes.error) {
				throw expensesRes.error || monthsRes.error
			}
			ctx.session.confirmResetStep = undefined
			await ctx.reply("‚úÖ –ú–µ—Å—è—Ü —Å–±—Ä–æ—à–µ–Ω.\n\nüß≠ –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: –Ω–∞–∂–º–∏ `–ù–æ–≤—ã–π –º–µ—Å—è—Ü`", {
				reply_markup: new Keyboard().text("–ù–æ–≤—ã–π –º–µ—Å—è—Ü").resized(),
			})
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –º–µ—Å—è—Ü–∞:", error)
			await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—è—Ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
				reply_markup: defaultMenu,
			})
		}
		return
	}

	if (ctx.session.expectingBudget) {
		const budget = parseInt(text)
		if (isNaN(budget) || budget <= 0) {
			return ctx.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±—é–¥–∂–µ—Ç–∞.", {
				reply_markup: new Keyboard().text("–û—Ç–º–µ–Ω–∞").resized(),
			})
		}
		if (budget > 1_000_000_000) {
			return ctx.reply("‚ùå –ë—é–¥–∂–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å—É–º–º—É.", {
				reply_markup: new Keyboard().text("–û—Ç–º–µ–Ω–∞").resized(),
			})
		}
		try {
			const { error } = await supabase
				.from("months")
				.upsert({ user_id: userId, month, budget, created_at: new Date() })
			if (error) throw error
			ctx.session.expectingBudget = false
			return ctx.reply(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±—é–¥–∂–µ—Ç –Ω–∞ ${month}: ${budget} ‚Ç∏`, {
				reply_markup: defaultMenu,
			})
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—é–¥–∂–µ—Ç–∞:", error)
			return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
				reply_markup: defaultMenu,
			})
		}
	}

	if (ctx.session.addingExpense) {
		const lines = text.split("\n")
		const results = lines
			.map((line, i) => ({ line, parsed: parseExpenseLine(line), index: i + 1 }))
			.filter(item => item.parsed)
		const failed = lines
			.map((line, i) => ({ line, parsed: parseExpenseLine(line), index: i + 1 }))
			.filter(item => !item.parsed)
		if (results.length === 0) {
			const errorMsg =
				"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n" +
				"–µ–¥–∞ 5000\n–∏–ª–∏\n–µ–¥–∞ - —É–∂–∏–Ω 5000" +
				(failed.length > 0
					? `\n\n–û—à–∏–±–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:\n${failed
							.map(f => `–°—Ç—Ä–æ–∫–∞ ${f.index}: ${f.line}`)
							.join("\n")}`
					: "")
			return ctx.reply(errorMsg, {
				reply_markup: new Keyboard().text("–û—Ç–º–µ–Ω–∞").resized(),
			})
		}

		const expense = results[0].parsed!
		if (expense.category.toLowerCase() === "–µ–¥–∞") {
			ctx.session.expectingFoodSubcategory = true
			ctx.session.pendingExpense = expense
			return ctx.reply("üçî –£—Ç–æ—á–Ω–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ–¥—ã:", {
				reply_markup: foodSubcategoryKeyboard,
			})
		}

		try {
			const expenses = [
				{
					user_id: userId,
					amount: expense.amount,
					category: expense.category,
					comment: expense.comment,
					created_at: new Date(),
				},
			]
			const { error } = await supabase.from("expenses").insert(expenses)
			if (error) throw error
			ctx.session.addingExpense = false
			const successMsg =
				`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n` +
				`‚Ä¢ ${getEmoji(expense.category)} ${expense.category} ‚Äî ${expense.amount} ‚Ç∏${
					expense.comment ? ` (${expense.comment})` : ""
				}` +
				(failed.length > 0
					? `\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:\n${failed
							.map(f => `–°—Ç—Ä–æ–∫–∞ ${f.index}: ${f.line}`)
							.join("\n")}`
					: "")
			return ctx.reply(successMsg, { reply_markup: defaultMenu })
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:", error)
			return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
				reply_markup: defaultMenu,
			})
		}
	}

	if (ctx.session.expectingSaveGoal) {
		const goal = parseInt(text)
		if (isNaN(goal) || goal <= 0) {
			return ctx.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–ª–∏.", {
				reply_markup: new Keyboard().text("–û—Ç–º–µ–Ω–∞").resized(),
			})
		}
		if (goal > 1_000_000_000) {
			return ctx.reply("‚ùå –¶–µ–ª—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å—É–º–º—É.", {
				reply_markup: new Keyboard().text("–û—Ç–º–µ–Ω–∞").resized(),
			})
		}
		try {
			const { data: budgetRow, error: budgetError } = await supabase
				.from("months")
				.select("budget")
				.eq("user_id", userId)
				.eq("month", month)
				.single()
			if (budgetError && budgetError.code !== "PGRST116") throw budgetError
			const { data: expenses, error: expensesError } = await supabase
				.from("expenses")
				.select("amount")
				.eq("user_id", userId)
				.gte("created_at", `${month}-01`)
			if (expensesError) throw expensesError
			const spent = expenses?.reduce((sum, e) => sum + e.amount, 0) ?? 0
			const budget = budgetRow?.budget ?? 0
			const left = budget - spent
			const days = daysLeftInMonth()
			const perDay = Math.floor((left - goal) / days)
			ctx.session.expectingSaveGoal = false
			if (left >= goal) {
				return ctx.reply(
					`üìä –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ${goal} ‚Ç∏:\n\n‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${days}\n‚Ä¢ –õ–∏–º–∏—Ç –Ω–∞ –¥–µ–Ω—å: ${perDay} ‚Ç∏\n\nüî• –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!`,
					{ reply_markup: defaultMenu },
				)
			} else {
				const needToCut = goal - left
				return ctx.reply(
					`‚ö†Ô∏è –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ${goal} ‚Ç∏, –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ ${needToCut} ‚Ç∏.\n\n–°–µ–π—á–∞—Å —É–∂–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏.`,
					{ reply_markup: defaultMenu },
				)
			}
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ü–µ–ª–∏:", error)
			return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
				reply_markup: defaultMenu,
			})
		}
	}
})

bot.catch(err => {
	console.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", err)
})

// bot.start()
export default webhookCallback(bot, "https")
